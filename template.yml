AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  AppName:
    Type: String
    Description: Name of the application

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          MyCognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  HelloFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: handler.hello
      Runtime: nodejs16.x
      CodeUri: ./hello
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /hello
            Method: GET

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-UserPool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AppName}-UserPoolClient
      UserPoolId: !Ref MyCognitoUserPool
      GenerateSecret: false # set to false for web clients
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000
      LogoutURLs:
        - http://localhost:3000
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit # for testing with postman
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref MyCognitoUserPool

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs16.x
      Timeout: 3

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyCognitoUserPool}"

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref MyApi

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref MyCognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub ${AppName}:MyCognitoUserPool

  AuthUrl:
    Description: "URL used for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
